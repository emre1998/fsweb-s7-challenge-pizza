{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _Portal = _interopRequireDefault(require(\"./Portal\"));\nvar _Fade = _interopRequireDefault(require(\"./Fade\"));\nvar _utils = require(\"./utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction noop() {}\nvar FadePropTypes = _propTypes[\"default\"].shape(_Fade[\"default\"].propTypes);\nvar propTypes = {\n  autoFocus: _propTypes[\"default\"].bool,\n  backdrop: _propTypes[\"default\"].bool,\n  backdropClassName: _propTypes[\"default\"].string,\n  backdropTransition: FadePropTypes,\n  children: _propTypes[\"default\"].node,\n  className: _propTypes[\"default\"].string,\n  container: _utils.targetPropType,\n  cssModule: _propTypes[\"default\"].object,\n  direction: _propTypes[\"default\"].oneOf(['start', 'end', 'bottom', 'top']),\n  fade: _propTypes[\"default\"].bool,\n  innerRef: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].object, _propTypes[\"default\"].string, _propTypes[\"default\"].func]),\n  isOpen: _propTypes[\"default\"].bool,\n  keyboard: _propTypes[\"default\"].bool,\n  labelledBy: _propTypes[\"default\"].string,\n  offcanvasTransition: FadePropTypes,\n  onClosed: _propTypes[\"default\"].func,\n  onEnter: _propTypes[\"default\"].func,\n  onExit: _propTypes[\"default\"].func,\n  style: _propTypes[\"default\"].object,\n  onOpened: _propTypes[\"default\"].func,\n  returnFocusAfterClose: _propTypes[\"default\"].bool,\n  role: _propTypes[\"default\"].string,\n  scrollable: _propTypes[\"default\"].bool,\n  toggle: _propTypes[\"default\"].func,\n  trapFocus: _propTypes[\"default\"].bool,\n  unmountOnClose: _propTypes[\"default\"].bool,\n  zIndex: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].number, _propTypes[\"default\"].string])\n};\nvar propsToOmit = Object.keys(propTypes);\nvar defaultProps = {\n  isOpen: false,\n  autoFocus: true,\n  direction: 'start',\n  scrollable: false,\n  role: 'dialog',\n  backdrop: true,\n  keyboard: true,\n  zIndex: 1050,\n  fade: true,\n  onOpened: noop,\n  onClosed: noop,\n  offcanvasTransition: {\n    timeout: _utils.TransitionTimeouts.Offcanvas\n  },\n  backdropTransition: {\n    mountOnEnter: true,\n    timeout: _utils.TransitionTimeouts.Fade // uses standard fade transition\n  },\n\n  unmountOnClose: true,\n  returnFocusAfterClose: true,\n  container: 'body',\n  trapFocus: false\n};\nvar Offcanvas = /*#__PURE__*/function (_React$Component) {\n  _inherits(Offcanvas, _React$Component);\n  var _super = _createSuper(Offcanvas);\n  function Offcanvas(props) {\n    var _this;\n    _classCallCheck(this, Offcanvas);\n    _this = _super.call(this, props);\n    _this._element = null;\n    _this._originalBodyPadding = null;\n    _this.getFocusableChildren = _this.getFocusableChildren.bind(_assertThisInitialized(_this));\n    _this.handleBackdropClick = _this.handleBackdropClick.bind(_assertThisInitialized(_this));\n    _this.handleBackdropMouseDown = _this.handleBackdropMouseDown.bind(_assertThisInitialized(_this));\n    _this.handleEscape = _this.handleEscape.bind(_assertThisInitialized(_this));\n    _this.handleTab = _this.handleTab.bind(_assertThisInitialized(_this));\n    _this.onOpened = _this.onOpened.bind(_assertThisInitialized(_this));\n    _this.onClosed = _this.onClosed.bind(_assertThisInitialized(_this));\n    _this.manageFocusAfterClose = _this.manageFocusAfterClose.bind(_assertThisInitialized(_this));\n    _this.clearBackdropAnimationTimeout = _this.clearBackdropAnimationTimeout.bind(_assertThisInitialized(_this));\n    _this.trapFocus = _this.trapFocus.bind(_assertThisInitialized(_this));\n    _this.state = {\n      isOpen: false\n    };\n    return _this;\n  }\n  _createClass(Offcanvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n        isOpen = _this$props.isOpen,\n        autoFocus = _this$props.autoFocus,\n        onEnter = _this$props.onEnter;\n      if (isOpen) {\n        this.init();\n        this.setState({\n          isOpen: true\n        });\n        if (autoFocus) {\n          this.setFocus();\n        }\n      }\n      if (onEnter) {\n        onEnter();\n      }\n\n      // traps focus inside the Offcanvas, even if the browser address bar is focused\n      document.addEventListener('focus', this.trapFocus, true);\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.isOpen && !prevProps.isOpen) {\n        this.init();\n        this.setState({\n          isOpen: true\n        });\n        return;\n      }\n\n      // now Offcanvas Dialog is rendered and we can refer this._element and this._dialog\n      if (this.props.autoFocus && this.state.isOpen && !prevState.isOpen) {\n        this.setFocus();\n      }\n      if (this._element && prevProps.zIndex !== this.props.zIndex) {\n        this._element.style.zIndex = this.props.zIndex;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearBackdropAnimationTimeout();\n      if (this.props.onExit) {\n        this.props.onExit();\n      }\n      if (this._element) {\n        this.destroy();\n        if (this.props.isOpen || this.state.isOpen) {\n          this.close();\n        }\n      }\n      document.removeEventListener('focus', this.trapFocus, true);\n      this._isMounted = false;\n    }\n\n    // not mouseUp because scrollbar fires it, shouldn't close when user scrolls\n  }, {\n    key: \"handleBackdropClick\",\n    value: function handleBackdropClick(e) {\n      if (e.target === this._mouseDownElement) {\n        e.stopPropagation();\n        var backdrop = this._backdrop;\n        if (!this.props.isOpen || this.props.backdrop !== true) return;\n        if (backdrop && e.target === backdrop && this.props.toggle) {\n          this.props.toggle(e);\n        }\n      }\n    }\n  }, {\n    key: \"handleTab\",\n    value: function handleTab(e) {\n      if (e.which !== 9) return;\n      if (this.offcanvasIndex < Offcanvas.openCount - 1) return; // last opened offcanvas\n\n      var focusableChildren = this.getFocusableChildren();\n      var totalFocusable = focusableChildren.length;\n      if (totalFocusable === 0) return;\n      var currentFocus = this.getFocusedChild();\n      var focusedIndex = 0;\n      for (var i = 0; i < totalFocusable; i += 1) {\n        if (focusableChildren[i] === currentFocus) {\n          focusedIndex = i;\n          break;\n        }\n      }\n      if (e.shiftKey && focusedIndex === 0) {\n        e.preventDefault();\n        focusableChildren[totalFocusable - 1].focus();\n      } else if (!e.shiftKey && focusedIndex === totalFocusable - 1) {\n        e.preventDefault();\n        focusableChildren[0].focus();\n      }\n    }\n  }, {\n    key: \"handleBackdropMouseDown\",\n    value: function handleBackdropMouseDown(e) {\n      this._mouseDownElement = e.target;\n    }\n  }, {\n    key: \"handleEscape\",\n    value: function handleEscape(e) {\n      if (this.props.isOpen && e.keyCode === _utils.keyCodes.esc && this.props.toggle) {\n        if (this.props.keyboard) {\n          e.preventDefault();\n          e.stopPropagation();\n          this.props.toggle(e);\n        }\n      }\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened(node, isAppearing) {\n      this.props.onOpened();\n      (this.props.offcanvasTransition.onEntered || noop)(node, isAppearing);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed(node) {\n      var unmountOnClose = this.props.unmountOnClose;\n      // so all methods get called before it is unmounted\n      this.props.onClosed();\n      (this.props.offcanvasTransition.onExited || noop)(node);\n      if (unmountOnClose) {\n        this.destroy();\n      }\n      this.close();\n      if (this._isMounted) {\n        this.setState({\n          isOpen: false\n        });\n      }\n    }\n  }, {\n    key: \"setFocus\",\n    value: function setFocus() {\n      if (this._dialog && typeof this._dialog.focus === 'function') {\n        this._dialog.focus();\n      }\n    }\n  }, {\n    key: \"getFocusableChildren\",\n    value: function getFocusableChildren() {\n      return this._element.querySelectorAll(_utils.focusableElements.join(', '));\n    }\n  }, {\n    key: \"getFocusedChild\",\n    value: function getFocusedChild() {\n      var currentFocus;\n      var focusableChildren = this.getFocusableChildren();\n      try {\n        currentFocus = document.activeElement;\n      } catch (err) {\n        currentFocus = focusableChildren[0];\n      }\n      return currentFocus;\n    }\n  }, {\n    key: \"trapFocus\",\n    value: function trapFocus(ev) {\n      if (!this.props.trapFocus) {\n        return;\n      }\n      if (!this._element) {\n        // element is not attached\n        return;\n      }\n      if (this._dialog === ev.target) {\n        // initial focus when the Offcanvas is opened\n        return;\n      }\n      if (this.offcanvasIndex < Offcanvas.openCount - 1) {\n        // last opened offcanvas\n        return;\n      }\n      var children = this.getFocusableChildren();\n      for (var i = 0; i < children.length; i += 1) {\n        // focus is already inside the Offcanvas\n        if (children[i] === ev.target) return;\n      }\n      if (children.length > 0) {\n        // otherwise focus the first focusable element in the Offcanvas\n        ev.preventDefault();\n        ev.stopPropagation();\n        children[0].focus();\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      try {\n        this._triggeringElement = document.activeElement;\n      } catch (err) {\n        this._triggeringElement = null;\n      }\n      if (!this._element) {\n        this._element = document.createElement('div');\n        this._element.setAttribute('tabindex', '-1');\n        this._element.style.position = 'relative';\n        this._element.style.zIndex = this.props.zIndex;\n        this._mountContainer = (0, _utils.getTarget)(this.props.container);\n        this._mountContainer.appendChild(this._element);\n      }\n      this._originalBodyPadding = (0, _utils.getOriginalBodyPadding)();\n      (0, _utils.conditionallyUpdateScrollbar)();\n      if (Offcanvas.openCount === 0 && this.props.backdrop && !this.props.scrollable) {\n        document.body.style.overflow = 'hidden';\n      }\n      this.offcanvasIndex = Offcanvas.openCount;\n      Offcanvas.openCount += 1;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._element) {\n        this._mountContainer.removeChild(this._element);\n        this._element = null;\n      }\n      this.manageFocusAfterClose();\n    }\n  }, {\n    key: \"manageFocusAfterClose\",\n    value: function manageFocusAfterClose() {\n      if (this._triggeringElement) {\n        var returnFocusAfterClose = this.props.returnFocusAfterClose;\n        if (this._triggeringElement.focus && returnFocusAfterClose) this._triggeringElement.focus();\n        this._triggeringElement = null;\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.manageFocusAfterClose();\n      Offcanvas.openCount = Math.max(0, Offcanvas.openCount - 1);\n      document.body.style.overflow = null;\n      (0, _utils.setScrollbarWidth)(this._originalBodyPadding);\n    }\n  }, {\n    key: \"clearBackdropAnimationTimeout\",\n    value: function clearBackdropAnimationTimeout() {\n      if (this._backdropAnimationTimeout) {\n        clearTimeout(this._backdropAnimationTimeout);\n        this._backdropAnimationTimeout = undefined;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props2 = this.props,\n        direction = _this$props2.direction,\n        unmountOnClose = _this$props2.unmountOnClose;\n      if (!!this._element && (this.state.isOpen || !unmountOnClose)) {\n        var isOffcanvasHidden = !!this._element && !this.state.isOpen && !unmountOnClose;\n        this._element.style.display = isOffcanvasHidden ? 'none' : 'block';\n        var _this$props3 = this.props,\n          className = _this$props3.className,\n          backdropClassName = _this$props3.backdropClassName,\n          cssModule = _this$props3.cssModule,\n          isOpen = _this$props3.isOpen,\n          backdrop = _this$props3.backdrop,\n          role = _this$props3.role,\n          labelledBy = _this$props3.labelledBy,\n          style = _this$props3.style;\n        var offcanvasAttributes = {\n          onKeyUp: this.handleEscape,\n          onKeyDown: this.handleTab,\n          'aria-labelledby': labelledBy,\n          role: role,\n          tabIndex: '-1'\n        };\n        var hasTransition = this.props.fade;\n        var offcanvasTransition = _objectSpread(_objectSpread(_objectSpread({}, _Fade[\"default\"].defaultProps), this.props.offcanvasTransition), {}, {\n          baseClass: hasTransition ? this.props.offcanvasTransition.baseClass : '',\n          timeout: hasTransition ? this.props.offcanvasTransition.timeout : 0\n        });\n        var backdropTransition = _objectSpread(_objectSpread(_objectSpread({}, _Fade[\"default\"].defaultProps), this.props.backdropTransition), {}, {\n          baseClass: hasTransition ? this.props.backdropTransition.baseClass : '',\n          timeout: hasTransition ? this.props.backdropTransition.timeout : 0\n        });\n        var Backdrop = backdrop && (hasTransition ? /*#__PURE__*/_react[\"default\"].createElement(_Fade[\"default\"], _extends({}, backdropTransition, {\n          \"in\": isOpen && !!backdrop,\n          innerRef: function innerRef(c) {\n            _this2._backdrop = c;\n          },\n          cssModule: cssModule,\n          className: (0, _utils.mapToCssModules)((0, _classnames[\"default\"])('offcanvas-backdrop', backdropClassName), cssModule),\n          onClick: this.handleBackdropClick,\n          onMouseDown: this.handleBackdropMouseDown\n        })) : /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n          className: (0, _utils.mapToCssModules)((0, _classnames[\"default\"])('offcanvas-backdrop', 'show', backdropClassName), cssModule),\n          ref: function ref(c) {\n            _this2._backdrop = c;\n          },\n          onClick: this.handleBackdropClick,\n          onMouseDown: this.handleBackdropMouseDown\n        }));\n        var attributes = (0, _utils.omit)(this.props, propsToOmit);\n        return /*#__PURE__*/_react[\"default\"].createElement(_Portal[\"default\"], {\n          node: this._element\n        }, /*#__PURE__*/_react[\"default\"].createElement(_Fade[\"default\"], _extends({}, attributes, offcanvasAttributes, offcanvasTransition, {\n          \"in\": isOpen,\n          onEntered: this.onOpened,\n          onExited: this.onClosed,\n          cssModule: cssModule,\n          className: (0, _utils.mapToCssModules)((0, _classnames[\"default\"])('offcanvas', className, \"offcanvas-\".concat(direction)), cssModule),\n          innerRef: function innerRef(c) {\n            _this2._dialog = c;\n          },\n          style: _objectSpread(_objectSpread({}, style), {}, {\n            visibility: isOpen ? 'visible' : 'hidden'\n          })\n        }), this.props.children), Backdrop);\n      }\n      return null;\n    }\n  }]);\n  return Offcanvas;\n}(_react[\"default\"].Component);\nOffcanvas.propTypes = propTypes;\nOffcanvas.defaultProps = defaultProps;\nOffcanvas.openCount = 0;\nvar _default = Offcanvas;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}